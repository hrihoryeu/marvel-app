{"version":3,"sources":["components/appHeader/AppHeader.js","resources/img/mjolnir.png","services/MarvelService.js","components/spinner/Spinner.js","components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charList/CharList.js","resources/img/vision.png","components/errorBoundary/ErrorBoundary.js","components/app/App.js","index.js"],"names":["AppHeader","className","href","MarvelService","_apiBase","_apiKey","_baseOffset","getResource","url","a","fetch","res","ok","Error","status","json","getAllCharacters","offset","data","results","map","_transformCharacter","getCharacter","id","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","Spinner","ErrorMessage","RandomChar","state","loading","error","marvelService","onCharLoaded","setState","onCharLoading","onError","updateChar","Math","floor","random","then","catch","this","errorMessage","spinner","content","onClick","src","mjolnir","alt","Component","View","imgStyle","style","Skeleton","CharInfo","charId","props","prevProps","prevState","skeleton","length","item","i","CharList","charList","newItemLoading","charEnded","onRequest","onCharListLoading","onCharListLoaded","newCharList","ended","itemRefs","setRef","ref","push","focusOnItem","forEach","classList","remove","add","focus","arr","tabIndex","onCharSelected","onKeyPress","e","key","renderItems","disabled","ErrorBoundary","errorInfo","console","log","children","App","selectedChar","decoration","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b75ba54.chunk.js","sourcesContent":["import './appHeader.scss'\n\nconst AppHeader = () => {\n    return (\n        <header className=\"app__header\">\n            <h1 className=\"app__title\">\n                <a href=\"#\">\n                    <span>Marvel</span> information portal\n                </a>\n            </h1>\n            <name className=\"app__menu\">\n                <ul>\n                    <li><a href=\"#\">Characters</a></li>\n                    <li><a href=\"#\">Comics</a></li>\n                </ul>\n            </name>\n        </header>\n    )\n}\n\nexport default AppHeader;\n","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","class MarvelService {\n    _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    _apiKey = 'apikey=397d67250d0c0adc5966f621f65f7646';\n    _baseOffset = 210;\n\n    getResource = async (url) => {\n        let res = await fetch(url);\n\n        if (!res.ok) {\n            throw new Error(`Couldn't fetch ${url}, status: ${res.status}`);\n        }\n\n        return await res.json();\n    }\n\n    getAllCharacters = async (offset = this._baseOffset) => {\n        const res = await this.getResource(`${this._apiBase}characters?limit=9&offset=${offset}&${this._apiKey}`);\n        return res.data.results.map(this._transformCharacter);\n    }\n\n    getCharacter = async (id) => {\n        const res = await this.getResource(`${this._apiBase}characters/${id}?${this._apiKey}`);\n        return this._transformCharacter(res.data.results[0]);\n    }\n\n    _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description ? `${char.description.slice(0, 197)}...` : 'There is no information about this character.',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n}\n\nexport default MarvelService;\n","import './spinner.scss'\n\nconst Spinner = () => {\n    return (\n        <div className='spinner'>\n            <div className=\"loadingio-spinner-dual-ring-ddaanp62c8k\">\n                <div className=\"ldio-z8sdxjne64\">\n                    <div></div>\n                    <div>\n                        <div></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Spinner;\n","const ErrorMessage = () => {\n    return (\n        <h1>\n            ERROR NOT FOUND ERROR NOT FOUND ERROR\n        </h1>\n    )\n}\n\nexport default ErrorMessage;\n","import { Component } from \"react\";\n\nimport './randomChar.scss'\nimport mjolnir from '../../resources/img/mjolnir.png'\nimport MarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nexport default class RandomChar extends Component {\n    state = {\n        char: '',\n        loading: true,\n        error: false\n    }\n\n    marvelService = new MarvelService();\n\n    componentDidMount() {\n        this.updateChar();\n    }\n    componentWillUnmount() {\n    }\n\n    onCharLoaded = (char) => {\n        this.setState({\n            char,\n            loading: false,\n            error: false\n        })\n    }\n\n    onCharLoading = () => {\n        this.setState({\n            loading: true\n        })\n    }\n\n    onError = () => {\n        this.setState({\n            loading: false,\n            error: true\n        })\n    }\n\n    updateChar = () => {\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011005);\n        this.onCharLoading()\n        this.marvelService\n            .getCharacter(id)\n            .then(this.onCharLoaded)\n            .catch(this.onError)\n    }\n\n    render() {\n        const {char, loading, error}= this.state;\n        const errorMessage = error ? <ErrorMessage /> : null;\n        const spinner = loading ? <Spinner /> : null;\n        const content = !(loading || error) ? <View char={char} /> : null;\n\n        return (\n            <div className=\"randomchar\">\n                {errorMessage}\n                {spinner}\n                {content}\n                <div className=\"randomchar__static\">\n                    <p className=\"randomchar__title\">\n                        Random character for today!<br/>\n                        Do you want to get to know him better?\n                    </p>\n                    <p className=\"randomchar__title\">\n                        Or choose another one\n                    </p>\n                    <button className=\"button button__main\">\n                        <div\n                            className=\"inner\"\n                            onClick={this.updateChar}>\n                            try it\n                        </div>\n                    </button>\n                    <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit': 'cover'}\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\n        || thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif') {\n        imgStyle = {'objectFit': 'unset'}\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail}\n                 alt=\"Random character\"\n                 className=\"randomchar__img\"\n                 style={imgStyle} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">Homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import './skeleton.scss'\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__skeleton\">\n                Please select a character to see information\n            </p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;\n","import './charInfo.scss'\n\nimport { Component } from \"react\";\nimport { PropTypes } from 'prop-types';\n\nimport MarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Skeleton from \"../skeleton/Skeleton\";\n\nexport default class CharInfo extends Component {\n    state = {\n        char: null,\n        loading: false,\n        error: false\n    }\n\n    marvelService = new MarvelService();\n\n    componentDidMount() {\n        this.updateChar()\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.charId !== prevProps.charId) {\n            this.updateChar();\n        }\n    }\n\n    updateChar = () => {\n        const {charId} = this.props;\n        if (!charId) {\n            return;\n        }\n\n        this.onCharLoading();\n        this.marvelService\n            .getCharacter(charId)\n            .then(this.onCharLoaded)\n            .catch(this.onError);\n    }\n\n    onCharLoaded = (char) => {\n        this.setState({\n            char,\n            loading: false\n        })\n    }\n\n    onCharLoading = () => {\n        this.setState({\n            loading: true\n        })\n    }\n\n    onError = () => {\n        this.setState({\n            loading: false,\n            error: true\n        })\n    }\n\n    render() {\n        const {char, loading, error} = this.state;\n\n        const skeleton = char || loading || error  ? null : <Skeleton />;\n        const spinner = loading ? <Spinner /> : null;\n        const errorMessage = error ? <ErrorMessage /> : null;\n        const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n\n        return (\n            <div className=\"char__info\">\n                {skeleton}\n                {errorMessage}\n                {spinner}\n                {content}\n            </div>\n        )\n    }\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n    let imgStyle = {'objectFit': 'cover'}\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit': 'unset'}\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img\n                    src={thumbnail}\n                    alt={name}\n                    style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There are no comics...'}\n                {\n                    comics.slice(0, 10).map((item, i) => {\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}","import React, { Component} from \"react\";\nimport { PropTypes } from 'prop-types';\n\nimport './charList.scss'\nimport MarvelService from \"../../services/MarvelService\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Spinner from \"../spinner/Spinner\";\nimport CharInfo from \"../charInfo/CharInfo\";\n\nexport default class CharList extends Component {\n\n    state = {\n        charList: [],\n        loading: true,\n        error: false,\n        newItemLoading: false,\n        offset: 210,\n        charEnded: false,\n    }\n\n    marvelService = new MarvelService();\n\n    componentDidMount() {\n        this.onRequest();\n    }\n\n    onRequest = (offset) => {\n        this.onCharListLoading();\n        this.marvelService\n            .getAllCharacters(offset)\n            .then(this.onCharListLoaded)\n            .catch(this.onError)\n    }\n\n    onCharListLoading = () => {\n        this.setState({\n            newItemLoading: true\n        })\n    }\n\n    onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true\n        }\n\n        this.setState(({offset, charList}) => ({\n            charList: [...charList, ...newCharList],\n            loading: false,\n            newItemLoading: false,\n            offset: offset + 9,\n            charEnded: ended\n        }))\n    }\n\n    onError = () => {\n        this.setState({\n            error: true,\n            loading: false\n        })\n    }\n\n    itemRefs = [];\n\n    setRef = (ref) => {\n        this.itemRefs.push(ref);\n    }\n\n    focusOnItem = (id) => {\n        this.itemRefs.forEach(item => item.classList.remove('char__item_selected'));\n        this.itemRefs[id].classList.add('char__item_selected');\n        this.itemRefs[id].focus();\n    }\n\n    renderItems(arr) {\n        const charList = arr.map((item, i) => {\n            let imgStyle = {'objectFit': 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit': 'unset'};\n            }\n            return (\n                <li\n                    ref={this.setRef}\n                    className=\"char__item\"\n                    tabIndex={0}\n                    key={item.id}\n                    onClick={() => {\n                        this.props.onCharSelected(item.id);\n                        this.focusOnItem(i);\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === 'Enter') {\n                            this.props.onCharSelected(item.id);\n                            this.focusOnItem(i);\n                        }\n                    }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n        return (\n            <ul className=\"char__grid\">\n                {charList}\n            </ul>\n        )\n    }\n\n    render() {\n        const {charList, loading, error, newItemLoading, offset, charEnded} = this.state;\n\n        const items = this.renderItems(charList);\n\n        const errorMessage = error ? <ErrorMessage /> : null;\n        const spinner = loading ? <Spinner /> : null;\n        const content = !(loading || error) ? items : null;\n\n        return (\n            <div className=\"char__list\">\n                {errorMessage}\n                {spinner}\n                {content}\n                <button\n                    className=\"button button__main button__long\"\n                    disabled={newItemLoading}\n                    style={{'display': charEnded ? 'none' : 'block'}}\n                    onClick={() => this.onRequest(offset)}>\n                    <div className=\"inner\">load more</div>\n                </button>\n            </div>\n        )\n    }\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import {Component} from \"react\";\n\nexport default class ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error);\n        console.log(errorInfo);\n        this.setState({\n            error: true\n        })\n    }\n\n    render() {\n        const { error } = this.state;\n        if (error) {\n            return <h2>Something went wrong</h2>\n        }\n\n        return this.props.children;\n    }\n}","import AppHeader from \"../appHeader/AppHeader\";\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\n\nimport decoration from '../../resources/img/vision.png';\nimport {Component} from \"react\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\n\nexport default class App extends Component {\n    state = {\n        selectedChar: null\n    }\n\n    onCharSelected = (id) => {\n        this.setState({\n            selectedChar: id\n        })\n    }\n\n    render() {\n        return (\n            <div className='app'>\n                <AppHeader />\n                <main>\n                    <ErrorBoundary>\n                        <RandomChar />\n                    </ErrorBoundary>\n                    <div className=\"char__content\">\n                        <ErrorBoundary>\n                            <CharList onCharSelected={this.onCharSelected} />\n                        </ErrorBoundary>\n                        <ErrorBoundary>\n                            <CharInfo charId={this.state.selectedChar} />\n                        </ErrorBoundary>\n                    </div>\n                    <img className='bg-decoration' src={decoration} alt='vision' />\n                </main>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from '../src/components/app/App';\nimport './style/style.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}